{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","value","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","addTask","autoComplete","FilterButton","aria-pressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","filter","tasks","setTasks","updatedTasks","map","remainingTasks","editedTaskList","taskList","key","filterList","isPressed","tasksNoun","length","headingText","newTask","nanoid","role","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.816099eb.chunk.js","sourcesContent":["import React , { useState } from \"react\";\n\n\n\n\nexport default function Todo(props) {\n    const [isEditing, setEditing] = useState(false);\n\n    const [newName, setNewName] = useState('');\n\n    function handleChange(e) {\n        setNewName(e.target.value);\n      }\n\n      function handleSubmit(e) {\n        e.preventDefault();\n        props.editTask(props.id, newName);\n        setNewName(\"\");\n        setEditing(false);\n      }\n\n    const editingTemplate = (\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label className=\"todo-label\" htmlFor={props.id}>\n              New name for {props.name}\n            </label>\n            <input id={props.id} className=\"todo-text\" type=\"text\" \n            value={newName}\n            onChange={handleChange} />\n          </div>\n          <div className=\"btn-group\">\n            <button type=\"button\" className=\"btn todo-cancel\"\n            onClick={() => setEditing(false)}\n            >\n                Cancel\n              <span className=\"visually-hidden\">renaming {props.name}</span>\n            </button>\n            <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n              Save\n              <span className=\"visually-hidden\">new name for {props.name}</span>\n            </button>\n          </div>\n        </form>\n      );\n      const viewTemplate = (\n        <div className=\"stack-small\">\n          <div className=\"c-cb\">\n              <input\n                id={props.id}\n                type=\"checkbox\"\n                defaultChecked={props.completed}\n                onChange={() => props.toggleTaskCompleted(props.id)}\n              />\n              <label className=\"todo-label\" htmlFor={props.id}>\n                {props.name}\n              </label>\n            </div>\n            <div className=\"btn-group\">\n              <button type=\"button\" className=\"btn\"\n              onClick={() => setEditing(true)}\n              >\n                Edit <span className=\"visually-hidden\">{props.name}</span>\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn__danger\"\n                onClick={() => props.deleteTask(props.id)}\n              >\n                Delete <span className=\"visually-hidden\">{props.name}</span>\n              </button>\n            </div>\n        </div>\n      );\n\n    return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n  }","import React, { useState } from \"react\";\n\nfunction Form(props) {\n  const [name, setName] = useState(\"\");\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.addTask(name);\n    setName(\"\");\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        </label>\n      </h2>\n      <input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value={name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  );\n}\n\nexport default Form;","import React from \"react\";\n\nfunction FilterButton(props) {\n  return (\n    <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\"\n    onClick={() => props.setFilter(props.name)}\n    >\n      <span className=\"visually-hidden\">Show </span>\n      <span>{props.name} </span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  );\n}\n\nexport default FilterButton;","import React,{useState} from 'react';\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  \n  const [filter, setFilter] = useState('All');\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n  \n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    )\n  );\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  \n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  return (\n    <div className={headingText}>\n       <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n      {filterList}\n      </div>\n      <h2 id=\"list-heading\">\n        3 tasks remaining\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n       {taskList}\n\n      </ul>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA}  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}